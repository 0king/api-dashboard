// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//schema:
//Level -> subject -> topic -> (sub)topic -> questions
//media = JSON = {url, height, width, thumb}

// 1-12 e.g., class 10 or level 10
model Level {
  id   Int    @id
  name String

  ///MediaType
  media Json?

  description String?
  subjects    Subject[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Subject {
  id          Int      @id @default(autoincrement())
  name        String
  ///MediaType
  media       Json?
  description String?
  Level       Level    @relation(fields: [levelId], references: [id])
  levelId     Int
  topics      Topic[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Topic {
  id            Int        @id @default(autoincrement())
  name          String
  description   String?
  ///MediaType
  media         Json?
  Subject       Subject    @relation(fields: [subjectId], references: [id])
  subjectId     Int
  // one to many relationship with self
  parentTopicId Int?
  parentTopic   Topic?     @relation("Subtopics", fields: [parentTopicId], references: [id])
  subtopics     Topic[]    @relation("Subtopics")
  questions     Question[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Question {
  id         String   @id @default(cuid())
  title      String?
  type       String? //mcq, subjective
  difficulty String? //easy, med, hard
  content    String[]
  options    String[]
  ///MediaType
  media      Json[]
  minutes    Int // time required, time to pause
  topicId    Int
  topic      Topic    @relation(fields: [topicId], references: [id])
  order      Int //order within a list
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  author     Author   @relation(fields: [authorId], references: [id])
  authorId   Int
  exam       Exam?    @relation(fields: [examId], references: [id])
  examId     String?
  answers    String[]
  solutions  String[]
}

/// daily, Weekly, monthly Test
model Exam {
  id          String     @id @default(uuid())
  minutes     Int // time duration
  name        String //title
  description String?
  image       Json? //cover image or gif
  questions   Question[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Student {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Author {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  name      String
  image     String?
  questions Question[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum Role {
  ADMIN
  USER
}
